<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spLantern</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obWeaponParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>points = 0;
pointListX[0] = 0;
pointListY[0] = 0;
maxIterations = 3;
rot = 0;

facingDirection = 0;
lmbPressed = 0;
rmbPressed = 0;
draw = 1;
accuracy = 0;

maxCores = 4;
core[0] = noone;
core[1] = noone;
core[2] = noone;
core[3] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pointListX[0] = obPlayer.x;
pointListY[0] = obPlayer.y;

for (var i = maxIterations; i &gt; 0; i --) {
    // Finds increment size
    incrementSize = power(2,i); 
    

    // For each existing point in iteration
    for (var j = incrementSize / 2; j &lt;= points - incrementSize / 2; j += incrementSize) {
    
        // Calculate an average of three approximations
        var pointAverageX = (pointListX[j - incrementSize / 2] + pointListX[j + incrementSize / 2]) / 2;
        var pointAverageY = (pointListY[j - incrementSize / 2] + pointListY[j + incrementSize / 2]) / 2;
        
        if (j - incrementSize &gt;= 0) {
            var pointLeftX = pointListX[j - incrementSize / 2] * 1.5
                - pointListX[j - incrementSize] * 0.5;
            var pointLeftY = pointListY[j - incrementSize / 2] * 1.5
                - pointListY[j - incrementSize] * 0.5;
        } else {
            var pointLeftX = pointAverageX;
            var pointLeftY = pointAverageY;
        }
        
        if (j + incrementSize &lt;= points) {
            var pointRightX = pointListX[j + incrementSize / 2] * 1.5
                - pointListX[j + incrementSize] * 0.5;
            var pointRightY = pointListY[j + incrementSize / 2] * 1.5
                - pointListY[j + incrementSize] * 0.5;
        } else {
            var pointRightX = pointAverageX;
            var pointRightY = pointAverageY;
        }
        
        pointListX[j] = (pointAverageX + pointLeftX + pointRightX) / 3;
        pointListY[j] = (pointAverageY + pointLeftY + pointRightY) / 3;
    }
}

rot += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particles
if (obPlayer.weapon[obPlayer.weaponSelected] == self) {
    for (var i = 0; i &lt; points; i ++) {
        var xchange = pointListX[i + 1] - pointListX[i];
        var ychange = pointListY[i + 1] - pointListY[i];
        var bothchange = sqrt(pointListX[i] * pointListX[i] + pointListY[i]) * pointListY[i];
        for (var j = 0; j &lt; floor(bothchange / 1024); j ++) {
            part_particles_create(obPart.part,pointListX[i] + xchange * j / floor(bothchange / 1024),pointListY[i] + ychange * j / floor(bothchange / 1024),obPart.bullet,1);
        }
    }

points = 0;
}

accuracy = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>accuracy += 0.5;
if (accuracy == 2) {
    // First target
    var target = instance_nearest(mouse_x,mouse_y,obEnemy);
    if (point_distance(mouse_x,mouse_y,target.x,target.y) &lt; 128) {
        targetX = target.x;
        targetY = target.y;
    } else {
        targetX = mouse_x;
        targetY = mouse_y;
    }
    
    // Second target
    target.x += 1024;
    var target2 = instance_nearest(target.x - 1024,target.y,obEnemy);
    target.x -= 1024;
    if (point_distance(target.x,target.y,target2.x,target2.y) &lt; 256 &amp;&amp;
        (point_distance(mouse_x,mouse_y,target2.x,target2.y) &lt; 256)) {
        target2X = target2.x;
        target2Y = target2.y;
    } else {
        target2X = targetX;
        target2Y = targetY;
    }
    
    if (obPlayer.weapon[obPlayer.weaponSelected] == self) {
        points += power(2,maxIterations);
        pointListX[points] = mouse_x;
        pointListY[points] = mouse_y;
        
        points += power(2,maxIterations);
        pointListX[points] = targetX;
        pointListY[points] = targetY;
        
        points += power(2,maxIterations);
        pointListX[points] = target2X;
        pointListY[points] = target2Y;
    }
    
    // random
    var distance = point_distance(x,y,mouse_x,mouse_y) / 8;
    for (var i = 0; i &lt; points; i ++) {
        pointListX[i] += random_range(-distance, distance);
        pointListY[i] += random_range(-distance, distance);
    }
}

if (accuracy == 2.5) {
    ///Particles
    if (obPlayer.weapon[obPlayer.weaponSelected] == self) {
        for (var i = 0; i &lt; points; i ++) {
            var xchange = pointListX[i + 1] - pointListX[i];
            var ychange = pointListY[i + 1] - pointListY[i];
            var bothchange = sqrt(pointListX[i] * pointListX[i] + pointListY[i]) * pointListY[i];
            for (var j = 0; j &lt; floor(bothchange / 1024); j ++) {
                part_particles_create(obPart.part,pointListX[i] + xchange * j / floor(bothchange / 1024),pointListY[i] + ychange * j / floor(bothchange / 1024),obPart.bullet,1);
            }
        }
    
    points = 0;
    }
    
    accuracy = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw) {
    draw_self();
}

for (var i = 0; i &lt;= points; i += power(2,maxIterations)) {
    draw_sprite_ext(spCrosshair,0,pointListX[i],pointListY[i],0.5,0.5,rot,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
