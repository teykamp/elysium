<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spGun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obWeaponParent</parentName>
  <maskName>spWall</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
facingDirection = 0;
weaponCooldown = 0;
lmbPressed = 0;
rmbPressed = 0;
draw = 1;
accuracy = 0;
currentAccuracy = 0; // helper variable
recoveryFlat = 1;
recoveryMultiplier = 0.9;
spread = 1.5;
rofBase = 600; //Per minute
velocity = 32;

holdTime = 0; // special variable to calculate spread

maxCores = 4;
core[0] = noone;
core[1] = noone;
core[2] = noone;
core[3] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet
weaponCooldown += 1;
if (lmbPressed) {
    while (weaponCooldown &gt;= 3600 / rofBase) {
        holdTime += 1;
        if (holdTime == 5) {
            currentAccuracy = 0;
            holdTime = 0;
        }
        
        x = obPlayer.x;
        y = obPlayer.y;
        facingDirection = obPlayer.facingDirection;
        
        action_create_object_motion(obBullet,x,y,velocity,facingDirection + (holdTime mod 2 - 0.5) * currentAccuracy);
        
        /*
        scanDir = facingDirection + random_range(-5,5);
        scanX = x;
        scanY = y;
        changeX = lengthdir_x(8,scanDir);
        changeY = lengthdir_y(8,scanDir);
        
        velocity = 120;
        
        while velocity {
            scanX += changeX;
            scanY += changeY;
            velocity -= 1;
            for (i = 0; i &lt; 1; i += 0.2) {
                part_particles_create(obPart.part,scanX + i * changeX,scanY+ i * changeY,obPart.bullet,1);
            }
            if position_meeting(scanX + changeX,scanY,obWall) {
                if abs(changeX) &lt; 3 {
                    changeX *= -0.8;
                    for (var j = 0; j &lt; 3; j ++ ) {
                        var i = instance_create(scanX,scanY,obBulletSplatter);
                        i.hspeed = changeX + random(4);
                        i.vspeed = changeY + random(4);
                        i.life = random(20);
                    }
                }
                velocity -= 40;
            }
            if position_meeting(scanX,scanY + changeY,obWall) {
                if abs(changeY) &lt; 3 {
                    changeY *= -0.8;
                    for (var j = 0; j &lt; 3; j ++ ) {
                        var i = instance_create(scanX,scanY,obBulletSplatter);
                        i.hspeed = changeX + random(4);
                        i.vspeed = changeY + random(4);
                        i.life = random(20);
                    }
                }
                velocity -= 40;
            }
            if position_meeting(scanX,scanY,obEnemy) {
                velocity -= 40;
            }
        }
        if position_meeting(scanX,scanY,obWall) {
            for (var j = 0; j &lt; 6; j ++ ) {
                var i = instance_create(scanX,scanY,obBulletSplatter);
                i.hspeed = random_range(-12,12);
                i.vspeed = random_range(-12,12);
                i.life = random(j * 2);
            }
        }
        
            */
        global.screenShake += 1;
        weaponCooldown -= 3600 / rofBase;
        if instance_exists(obClient)
            obClient.shotsFired += 1;
            
    }
} else {
    holdTime = 0;
    weaponCooldown = min(weaponCooldown, 3600 / rofBase);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Accuracy
if (lmbPressed) {
    accuracy += spread;
    currentAccuracy += spread;
}
accuracy *= recoveryMultiplier;
currentAccuracy *= recoveryMultiplier;
if (accuracy &gt; recoveryFlat) {
    accuracy -= recoveryFlat;
    currentAccuracy -= recoveryFlat;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (draw) {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
