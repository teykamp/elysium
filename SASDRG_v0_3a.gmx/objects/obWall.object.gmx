<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spWall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
drawn = true;
shadow_distance = 768;
vertX[5] = 0;
vertY[5] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
/// Calculates if shadow is needed
if instance_exists(obPlayer){
    playerX = obPlayer.x + global.lightOffsetX;
    playerY = obPlayer.y + global.lightOffsetY;
    camDir = point_direction(playerX,playerY,mouse_x,mouse_y);
    drawn = abs(angle_difference(camDir,point_direction(playerX,playerY,x + 0,y + 0))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 32,y + 0))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 0,y + 32))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 32,y + 32))) &lt; 30;
            
    drawn2 = abs(angle_difference(camDir,point_direction(playerX,playerY,x + 4,y + 4))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 28,y + 4))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 4,y + 28))) &lt; 30 ||
            abs(angle_difference(camDir,point_direction(playerX,playerY,x + 28,y + 28))) &lt; 30;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
/// Calculate vertexs
if drawn {    
    dir = point_direction(x + 16,y + 16,obPlayer.x + global.lightOffsetX,obPlayer.y + global.lightOffsetY);
    if dir &gt;= 0 and dir &lt;= 90
    {
        vertX[0] = x + 0;
        vertY[0] = y + 0;
        vertX[1] = x + 0;
        vertY[1] = y + 32;
        vertX[2] = x + 32;
        vertY[2] = y + 32;
    }
    if dir &gt;= 90 and dir &lt;= 180
    {
        vertX[0] = x + 0;
        vertY[0] = y + 32;
        vertX[1] = x + 32;
        vertY[1] = y + 32;
        vertX[2] = x + 32;
        vertY[2] = y + 0;
    }
    if dir &gt;= 180 and dir &lt;= 270
    {
        vertX[0] = x + 32;
        vertY[0] = y + 32;
        vertX[1] = x + 32;
        vertY[1] = y + 0;
        vertX[2] = x + 0;
        vertY[2] = y + 0;
    }
    if dir &gt;= 270 and dir &lt;= 360
    {
        vertX[0] = x + 32;
        vertY[0] = y + 0;
        vertX[1] = x + 0;
        vertY[1] = y + 0;
        vertX[2] = x + 0;
        vertY[2] = y + 32;
    }
    for (i = 0; i &lt; 6; i ++) {
        if vertX[i] = x + 0
            vertX[i+3] = x - 16;
        if vertX[i] = x + 32
            vertX[i+3] = x + 48;
        if vertY[i] = y + 0
            vertY[i+3] = y - 16;
        if vertY[i] = y + 32
            vertY[i+3] = y + 48;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if drawn{
    draw_set_color(c_black);
    
    // main
    surface_set_target(obShadowSurf.surf);
    draw_primitive_begin(pr_trianglefan)
    draw_vertex(vertX[1],vertY[1])
    draw_vertex(vertX[0],vertY[0])
    draw_vertex(lengthdir_x(shadow_distance,dir[0]) + vertX[0],lengthdir_y(shadow_distance,dir[0]) + vertY[0])
    draw_vertex(lengthdir_x(shadow_distance,dir[1]) + vertX[1],lengthdir_y(shadow_distance,dir[1]) + vertY[1])
    draw_vertex(lengthdir_x(shadow_distance,dir[2]) + vertX[2],lengthdir_y(shadow_distance,dir[2]) + vertY[2])
    draw_vertex(vertX[2],vertY[2])
    draw_primitive_end();
    surface_reset_target();
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();
/*
    dir[0] = point_direction(playerX,playerY,vertX[0],vertY[0])
    dir[1] = point_direction(playerX,playerY,vertX[1],vertY[1])
    dir[2] = point_direction(playerX,playerY,vertX[2],vertY[2])
    dir[3] = point_direction(playerX,playerY,vertX[3],vertY[3])
    dir[4] = point_direction(playerX,playerY,vertX[4],vertY[4])
    dir[5] = point_direction(playerX,playerY,vertX[5],vertY[5])

if drawn2{
surface_set_target(obShadowSurf.surf);
        draw_set_color(c_dkgray)
        draw_primitive_begin(pr_trianglefan)
        draw_vertex(vertX[1],vertY[1])
        draw_vertex(vertX[0],vertY[0])
        draw_vertex(lengthdir_x(shadow_distance,dir[3]) + vertX[0],lengthdir_y(shadow_distance,dir[3]) + vertY[0])
        draw_vertex(lengthdir_x(shadow_distance,dir[4]) + vertX[1],lengthdir_y(shadow_distance,dir[4]) + vertY[1])
        draw_vertex(lengthdir_x(shadow_distance,dir[5]) + vertX[2],lengthdir_y(shadow_distance,dir[5]) + vertY[2])
        draw_vertex(vertX[2],vertY[2])
        draw_primitive_end();
        surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
