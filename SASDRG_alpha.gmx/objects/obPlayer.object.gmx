<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
drag = 0.8;
moveSpeedBase = 0.75;
moveSpeed = 0;
sprintMultiplier = 2;
playerRadius = 16;
lightOffsetX = 0;
lightOffsetY = 0;
lightDistance = 10;
facingDirection = 0;
dashDirection = 0;
dashPower = 20;

// Bars
hp = 10;
hpMax = 10;

energy = 10;
energyMax = 10;
energyRegenMultiplier = 1;
energyRegenRate = 0;

shield = 0;
shieldMax = 3;
shieldRegenMultiplier = 1;

damage = 0;

// GUI adjustment
healthOffsetX = 32;
healthOffsetY = 32;
healthHeight = 48;
healthWidth = 32;
healthSpacing = 8;

// cooldown
weaponCooldown = 0;
dashCooldown = 0;

// Equipment
weaponSelected = 0;
weaponMax = 3;
weapon[0] = noone;
weapon[1] = noone;
weapon[2] = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Camera
instance_create(x,y,obCamera);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
moveSpeed = moveSpeedBase;
if (keyboard_check(vk_shift) &amp;&amp; speed &gt; 0.1 &amp;&amp; energy){
    moveSpeed = moveSpeedBase * sprintMultiplier;
    energyRegenRate = 0;
    energy -= 0.05;
}

hChange = (keyboard_check(ord("D")) - keyboard_check(ord("A"))) * moveSpeed;
vChange = (keyboard_check(ord("S")) - keyboard_check(ord("W"))) * moveSpeed;
if sign(abs(hChange)) &amp;&amp; sign(abs(vChange)) {
    hChange *= 0.7;
    vChange *= 0.7;
}
hspeed += hChange;
vspeed += vChange;

// Adaptive Camera
if (object_exists(obCamera)) {
    obCamera.x += hspeed;
    obCamera.y += vspeed;
}

speed *= drag;

if (speed &gt; 0.1) {
    facingDirection = direction;
}

// Dash
if (dashCooldown) {
    var changeX = lengthdir_x(dashCooldown,dashDirection);
    var changeY = lengthdir_y(dashCooldown,dashDirection);
    if (!place_meeting(x + changeX,y + changeY, obWall)) {
        x += changeX;
        y += changeY;
    }
    dashCooldown -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collision
// Stay in room
if x + hspeed + playerRadius &gt; room_width {
    hspeed = 0;
    x = room_width - playerRadius;
} else if x + hspeed - playerRadius &lt; 0 {
    hspeed = 0;
    x = playerRadius;
}
if y + vspeed + playerRadius &gt; room_height {
    vspeed = 0;
    y = room_height - playerRadius;
} else if y + vspeed - playerRadius &lt; 0 {
    vspeed = 0;
    y = playerRadius;
}
// Wall collision
if place_meeting(x + hspeed,y,obWall) {
    while !place_meeting(x + sign(hspeed),y,obWall) &amp;&amp; x &gt; 0 &amp;&amp; x &lt; room_width{
        x += sign(hspeed);
    }
    hspeed = 0;
}
if place_meeting(x,y + vspeed,obWall) {
    while !place_meeting(x,y + sign(vspeed),obWall) &amp;&amp; y &gt; 0 &amp;&amp; y &lt; room_height {
        y += sign(vspeed);
    }
    vspeed = 0;
}
if place_meeting(x + hspeed,y + vspeed,obWall) {
    vspeed = 0;
    hspeed = 0;
} else if place_meeting(x + hspeed,y + vspeed,obWall) {
    vspeed = 0;
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cooldowns
weaponCooldown += 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// light offset
lightOffsetX = lengthdir_x(12,facingDirection-180);
lightOffsetY = lengthdir_y(12,facingDirection-180);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// light hitscan variables
playerX = x + lightOffsetX / 2;
playerY = y + lightOffsetY / 2;
lightDir = round(facingDirection);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bars

// Regen shield
if (energy &gt; energyMax * 0.5 &amp;&amp; shield &lt; shieldMax) {
     shield += 0.005 * shieldRegenMultiplier;
}

// Regen energy
energyRegenRate += 0.0005;
if (energy &lt; energyMax) {
    energy += energyRegenRate * energyRegenMultiplier;
}
if (energy &gt; energyMax) {
    energy = energyMax;
}

energyMax = ceil(hp) + ceil(shield);

// Damage
if (damage != 0) {
    shield -= damage;
    if (shield &lt; 0) {
        hp += shield;
        shield = 0;
    }
    damage = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use weapons
if (weapon[weaponSelected] != noone) {
    weapon[weaponSelected].lmbPressed = false;
    if (mouse_check_button(mb_left)) {
        weapon[weaponSelected].lmbPressed = true;
    }
    
    weapon[weaponSelected].rmbPressed = false;
    if (mouse_check_button(mb_right)) {
        weapon[weaponSelected].rmbPressed = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dashCooldown) {
    motion_add(point_direction(other.x,other.y,x,y),5);
    global.screenShake += 5;
    damage = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSelected += 1;
if (weaponSelected == weaponMax) {
    weaponSelected = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSelected -= 1;
if (weaponSelected == -1) {
    weaponSelected = weaponMax - 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Raycast subtraction lighting
draw_self();
if instance_exists(obWall) {
    draw_set_blend_mode(bm_subtract);
    surface_set_target(obShadowSurf.surf);
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(playerX,playerY);
    for (i = -global.beamWidth; i &lt;= global.beamWidth; i += global.lightResolution) {
        var scanX = playerX;
        var scanY = playerY;
        var scanDir = lightDir + i;
        var changeX = lengthdir_x(1,scanDir);
        var changeY = lengthdir_y(1,scanDir);
        for (j = 0; j &lt; lightDistance; j ++) {
            target = instance_nearest(scanX-16,scanY-16,obWall);
            if instance_exists(target) {
                distance = point_distance(scanX-16,scanY-16,target.x,target.y);
                if distance &lt; 24 &amp;&amp; position_meeting(scanX,scanY,obWall) {
                    break;
                }
                distance = max(distance,0.25);
                scanX += changeX * distance;
                scanY += changeY * distance;
            }
        }
        draw_vertex(scanX,scanY);
    }
    draw_primitive_end();
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw circle
surface_set_target(obShadowSurf.surf);
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_blend_mode(bm_subtract);
draw_circle(x,y,16,false);
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw energy
draw_set_color(c_lime);
draw_rectangle(healthOffsetX,
    healthOffsetY + healthHeight + 16,
    healthOffsetX + (energy * (healthWidth + healthSpacing) - healthSpacing),
    healthOffsetY + healthHeight + 32,
    false);

// draw hp
draw_set_color(c_red);

for(var i = 0; i &lt; hp; i ++) {
    draw_rectangle(healthOffsetX + (i * (healthWidth + healthSpacing)),
        healthOffsetY,
        healthOffsetX + ((i + 1) * (healthWidth + healthSpacing) - healthSpacing),
        healthOffsetY + healthHeight,
        false);
}

// draw shield
shieldOffsetX = healthOffsetX + (ceil(hp) * (healthWidth + healthSpacing));
draw_set_color(c_blue);

for (var i = 0; i &lt; shield; i ++) {
    draw_rectangle(shieldOffsetX + (i * (healthWidth + healthSpacing)),
        healthOffsetY,
        shieldOffsetX + ((i + 1) * (healthWidth + healthSpacing) - healthSpacing),
        healthOffsetY + healthHeight,
        false);
}

// draw selection
draw_set_alpha(0.5);
draw_rectangle(weaponSelected * 128 + 64,
    view_hport[0] - 192,
    weaponSelected * 128 + 192,
    view_hport[0] - 256,
    false);

// draw weapon
draw_set_alpha(1);
for (var i = 0; i &lt; 3; i ++) {
    if (weapon[i] != noone) {
        draw_sprite_ext(weapon[i].sprite_index,
            0,
            i * 128 + 64,
            view_hport[0] - 256,
            4,
            4,
            0,
            c_white,
            1);
    }
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Raycast subtraction lighting
draw_set_alpha(0.5);
if instance_exists(obWall) {
    draw_set_blend_mode(bm_subtract);
    surface_set_target(obShadowSurf.surf);
    draw_primitive_begin(pr_trianglefan);
    draw_vertex(playerX,playerY);
    for (i = -global.beamWidth - 4; i &lt;= global.beamWidth + 4; i += global.lightResolution) {
        var scanX = playerX;
        var scanY = playerY;
        var scanDir = lightDir + i;
        var changeX = lengthdir_x(1,scanDir);
        var changeY = lengthdir_y(1,scanDir);
        for (j = 0; j &lt; lightDistance + 1; j ++) {
            target = instance_nearest(scanX-16,scanY-16,obWall);
            if instance_exists(target) {
                distance = point_distance(scanX-16,scanY-16,target.x,target.y);
                if distance &lt; 24 &amp;&amp; position_meeting(scanX,scanY,obWall) {
                    break;
                }
                distance = max(distance,0.25);
                scanX += changeX * distance;
                scanY += changeY * distance;
            }
        }
        draw_vertex(scanX,scanY);
    }
    draw_primitive_end();
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw circle
draw_self();
surface_set_target(obShadowSurf.surf);
draw_set_color(c_black);
draw_set_alpha(0.5);
draw_set_blend_mode(bm_subtract);
draw_circle(x,y,40,false);
draw_set_blend_mode(bm_normal);
draw_set_alpha(1);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw crosshair
if (weapon[weaponSelected] != noone) {
    draw_sprite_ext(spCrosshair,
        0,
        x + lengthdir_x(256,facingDirection) + lengthdir_x(weapon[weaponSelected].accuracy,facingDirection + 90),
        y + lengthdir_y(256,facingDirection) + lengthdir_y(weapon[weaponSelected].accuracy,facingDirection + 90),
        1,
        1,
        facingDirection,
        c_white,
        1);
        
    draw_sprite_ext(spCrosshair,
        0,
        x + lengthdir_x(256,facingDirection) + lengthdir_x(weapon[weaponSelected].accuracy,facingDirection - 90),
        y + lengthdir_y(256,facingDirection) + lengthdir_y(weapon[weaponSelected].accuracy,facingDirection - 90),
        1,
        -1,
        facingDirection,
        c_white,
        1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swap weapon
dropped = noone;
// move current weapon out of the way to avoid collision
if (weapon[weaponSelected]) {
    weapon[weaponSelected].x = x - 128;
    weapon[weaponSelected].lmbPressed = false;
    weapon[weaponSelected].rmbPressed = false;
}

// find weapon on the floor, if any
// collision rectange returns the collided instance
var dropped = collision_rectangle(x-16, y-16, x+16, y+16, obWeaponParent, false, false);
if (dropped) {
    // If you are holding a weapon, drop it
    if (weapon[weaponSelected]) {
        weapon[weaponSelected].draw = true;
        weapon[weaponSelected].x = x - 16;
        weapon[weaponSelected].y = y - 16;
    }

    // pick up weapon on the floor
    weapon[weaponSelected] = dropped;
    dropped.draw = false;
} else {
    // drop weapon
    if (weapon[weaponSelected]) {
        weapon[weaponSelected].draw = true;
        weapon[weaponSelected].x = x - 16;
        weapon[weaponSelected].y = y - 16;
        weapon[weaponSelected] = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dash
if (energy &gt; 5) {
    energy -= 5;
    energyRegenRate = 0;
    dashDirection = facingDirection;
    dashCooldown = dashPower;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
